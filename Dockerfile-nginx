# Use the official MySQL 8.0 image as a base image
FROM mysql:8.0

# Set environment variables (equivalent to environment in docker-compose.yml)
ENV MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
ENV MYSQL_DATABASE=${MYSQL_DATABASE}
ENV MYSQL_USER=${MYSQL_USER}
ENV MYSQL_PASSWORD=${MYSQL_PASSWORD}

# Copy the initialization SQL script to the container
# This is equivalent to mounting ./init.sql to /docker-entrypoint-initdb.d/init.sql in the compose file
COPY ./init.sql /docker-entrypoint-initdb.d/init.sql

# Expose the MySQL port (3306)
EXPOSE 3306

# Healthcheck (this will be defined in the docker-compose file or the orchestrator)
# You can also define healthchecks using the `HEALTHCHECK` instruction in Dockerfile
HEALTHCHECK --interval=30s --timeout=10s --retries=5 \
  CMD mysqladmin ping -h localhost -u${MYSQL_USER} -p${MYSQL_PASSWORD} || exit 1

# Use PHP 8.2 with FPM as the base image
FROM php:8.2-fpm

# Switch to root user for installing system dependencies
USER root

# Set environment variables
ENV COMPOSER_ALLOW_SUPERUSER=1

# Install system dependencies and tools
RUN apt-get update && apt-get install -y \
    git \
    unzip \
    libicu-dev \
    libpq-dev \
    libzip-dev \
    zlib1g-dev \
    libjpeg-dev \
    libpng-dev \
    libfreetype6-dev \
    netcat-openbsd \
    default-mysql-client \
    dos2unix \
    && docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install pdo pdo_mysql intl zip opcache gd bcmath \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Composer globally from the official Composer image
COPY --from=composer:latest /usr/bin/composer /usr/local/bin/composer
RUN chmod +x /usr/local/bin/composer

# Set the working directory to /var/www/symfony (inside the container)
WORKDIR /var/www/symfony

# Copy Composer configuration files (composer.json and composer.lock)
COPY backend/composer.json backend/composer.lock ./

# Set permissions for Composer cache and vendor directory
RUN mkdir -p /var/www/.composer/cache && \
    chown -R www-data:www-data /var/www/.composer && \
    mkdir -p /var/www/symfony/vendor && \
    chown -R www-data:www-data /var/www/symfony/vendor

# Install PHP dependencies as the www-data user
USER www-data
RUN composer install --no-interaction --no-scripts --prefer-dist

# Switch back to root to copy the rest of the project files and set permissions
USER root

# Copy the entire backend folder (including project files) into the container
COPY backend/ .

# Ensure `bin/console` has Unix-style line endings
RUN dos2unix /var/www/symfony/bin/console

# Create var/Migrations directory if it doesn't exist, and set correct ownership
RUN mkdir -p /var/www/symfony/var/Migrations && \
    chown -R www-data:www-data /var/www/symfony/var/Migrations

# Ensure necessary directories have the correct permissions
RUN chown -R www-data:www-data /var/www/symfony/var /var/www/symfony/vendor

# Copy the PHP-FPM configuration file for the container
COPY backend/fpm.conf /usr/local/etc/php-fpm.d/www.conf

# Copy entrypoint and wait-for-it scripts, ensuring they have Unix line endings
COPY backend/entrypoint.sh /usr/local/bin/entrypoint.sh
COPY backend/wait-for-it.sh /usr/local/bin/wait-for-it
RUN chmod +x /usr/local/bin/entrypoint.sh /usr/local/bin/wait-for-it && dos2unix /usr/local/bin/entrypoint.sh /usr/local/bin/wait-for-it

# Fix line endings for entrypoint.sh
RUN dos2unix /usr/local/bin/entrypoint.sh

# Switch back to the non-root user (www-data)
USER www-data

# Expose port 9000 for PHP-FPM
EXPOSE 9000

# Define the entrypoint and command for the container
ENTRYPOINT ["entrypoint.sh"]
CMD ["php-fpm"]


# Stage 1: Build
FROM node:18 AS builder

USER root

# Set the working directory
WORKDIR /app

# Verify Node.js and npm versions
RUN node -v
RUN npm -v

# Copy package.json and package-lock.json
COPY frontend/package*.json ./

# Clean up existing node_modules and npm cache
RUN rm -rf node_modules && npm cache clean --force

# Install a specific version of npm
RUN npm install -g npm@10.8.3

# Install project dependencies
RUN npm ci

# Install Angular CLI globally
RUN npm install -g @angular/cli@16.2.1

# Copy the rest of the application
COPY frontend/ ./

# Remove old dist folder if it exists
RUN rm -rf /app/dist

# Build the Angular app
RUN npm run build --omit=dev --output-path=dist/browser

# Stage 2: Serve with Nginx
FROM nginx:1.19-alpine

# Install system dependencies and tools
RUN apk update && apk add --no-cache dos2unix

# Remove default Nginx content
RUN rm -rf /var/www/angular/dist/*

# Copy Angular build output to a temporary directory
COPY --from=builder /app/dist/browser /tmp/angular-build

# Copy custom file merging script
COPY frontend/merge-files.sh /usr/local/bin/merge-files.sh
RUN chmod +x /usr/local/bin/merge-files.sh
RUN dos2unix /usr/local/bin/merge-files.sh

# Run the file merging script
RUN sh /usr/local/bin/merge-files.sh

# Copy built files from the builder stage
COPY --from=builder /app/dist/browser /var/www/angular/dist

RUN mkdir -p /var/www/symfony/public

# Copy custom Nginx configuration file
COPY nginx.conf /etc/nginx/nginx.conf

# Copy SSL certificates
COPY frontend/ssl/server.crt /etc/nginx/ssl/server.crt
COPY frontend/ssl/server.key /etc/nginx/ssl/server.key

# Set permissions for SSL certificates
RUN chmod 600 /etc/nginx/ssl/server.key \
    && chmod 644 /etc/nginx/ssl/server.crt

# Expose ports
EXPOSE 80
EXPOSE 443

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]
