version: '3.8'

services:
  symfony:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - symfony_code:/var/www/symfony
    environment:
      DB_HOST: ${DB_HOST}
      DATABASE_URL: mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@database:3306/${MYSQL_DATABASE}
      DATABASE_URL_CONSOLE: mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@database:3306/${MYSQL_DATABASE}
      APP_ENV: ${APP_ENV:-prod}
      APP_DEBUG: ${APP_DEBUG:-0}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    networks:
      - symfony-angular-network
    depends_on:
      database:
        condition: service_healthy
    entrypoint: /usr/local/bin/entrypoint.sh
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000" ]
      interval: 30s
      timeout: 10s
      retries: 5

  nginx:
    build:
      context: ./
      dockerfile: Dockerfile-nginx
    ports:
      - "8000:80"  # For HTTP
      - "4433:443"  # For HTTPS
    volumes:
      - symfony_code:/var/www/symfony
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./backend/ssl:/etc/nginx/ssl  # Use a single mount for SSL
      - angular_dist:/var/www/angular/dist  # Angular build output
    networks:
      - symfony-angular-network
    depends_on:
      - symfony

  nginx-angular:
    build:
      context: ./frontend
      dockerfile: Dockerfile-nginx-angular
    ports:
      - "8001:80"  # For Angular app
      - "4200:443"  # For Angular app
    volumes:
      - angular_dist:/var/www/angular/dist
      - ./frontend/ssl:/etc/nginx/ssl  # Use a single mount for SSL
    networks:
      - symfony-angular-network

  php-fpm:
    build:
      context: .
      dockerfile: Dockerfile-php-fpm
    volumes:
      - symfony_code:/var/www/symfony
      - ./var/log:/var/log
    networks:
      - symfony-angular-network

  database:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - my_sqldata:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # Mount the init script
    networks:
      - symfony-angular-network
    ports:
      - "3306:3306"  # Ensure this line exists
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "database", "-u", "zm_32", "-pzm_32"]
      interval: 30s
      timeout: 10s
      retries: 5

  cron:
    build:
      context: .
      dockerfile: Dockerfile-cron
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
    command: >
      sh -c "
        apk add --no-cache git curl bash && \
        echo '*/5 * * * * cd /app && echo \$(date) >> cron.log; git pull >> cron.log 2>&1; docker-compose -f docker-compose-prod.yml up -d --build >> cron.log 2>&1' | crontab - && \
        crond -f
      "

networks:
  symfony-angular-network:
    driver: bridge

volumes:
  db_data:
  symfony_code:
  angular_dist:
  my_sqldata: {}
